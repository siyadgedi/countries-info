{"version":3,"sources":["Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Weather","props","useState","isLoading","setLoading","weatherdata","setWeatherData","params","key","process","q","countries","index","useEffect","axios","get","then","response","apiResponse","data","catch","error","console","log","className","current","temp_f","src","condition","icon","emojiFlags","require","Names","llist","results","namer","length","getIndex","j","i","toLowerCase","items","name","push","getLanguages","style","paddingTop","toString","replace","marginLeft","map","item","getFlag","n","countryCode","emoji","App","setCountries","newName","setNewName","value","onChange","event","target","sename","result","country","numericCode","string","population","region","capital","flag","subs","indexOf","search","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7be39c78.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport './App.css'\nfunction Weather(props) {\n    const [isLoading, setLoading] = useState(true);\n    const [weatherdata, setWeatherData] = useState({});\n    const API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n    const params = {\n        key: API_KEY,\n        q: props.countries[props.index]['capital']\n      }\n    useEffect(() => {\n        axios.get('https://api.weatherapi.com/v1/current.json', {params})\n    .then(response => {\n      const apiResponse = response.data;\n      setWeatherData(apiResponse);\n      setLoading(false);\n    }).catch(error => {\n      console.log(error);\n    });\n      }, [])\n    if (isLoading) {\n        return <div className=\"App\">Loading Weather Data</div>;\n      }\n    return (\n        <div>\n            <div>The current temperature in {props.countries[props.index]['capital']} is {weatherdata.current.temp_f}</div>\n            <img className=\"image\" src={weatherdata.current.condition.icon} />\n        </div>\n        \n  );\n}\nexport default Weather;","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport './App.css'\nimport Weather from './Weather'\nvar emojiFlags = require('emoji-flags');\nfunction App() {\n  const [countries, setCountries] = useState([])\n  const [newName, setNewName] = useState('');\n  const [list, setlist] = useState([])\n  const indivinfo = [];\n  const filtercountries = (event) => { console.log(event.target.value); setNewName(event.target.value) };\n  useEffect(() => {\n    axios.get('https://restcountries.eu/rest/v2/all').then(response => {\n      setCountries(response.data)\n    })\n  }, [])\n  const search = (sename) => {\n    const result = [];\n    countries.map((country) => {\n      const { numericCode, name, population, region, capital, flag } = country\n      let string = name.toLowerCase();\n      let subs = sename.toLowerCase();\n      if (string.indexOf(subs) !== -1) {\n\n        result.push(name);\n      }\n\n    })\n    if (result.length > 10) {\n      return [\"too long\"];\n    }\n    return result;\n  }\n\n  return (\n    <div className='background'>\n      <div className='App'>\n        <h1><b>üåç Countries Around the World üåç</b></h1>\n        <p>Search for the name of any country below, and learn more about it!</p>\n        <input value={newName} onChange={filtercountries} />\n        <Names results={search(newName)} namer={newName} countries={countries}></Names>\n      </div>\n    </div>\n\n\n  );\n}\n// const Name = (props) => {\n//   return (\n//     <div>\n//       {props.name}\n//     </div>\n//   )\n// }\n\nconst Names = (props) => {\n  const llist = props.results;\n  if (props.namer === \"\") {\n    return (\n      <div></div>\n    )\n  }\n  else if (llist[0] === \"too long\") {\n    return (\n      <div>Too many matches, specify query</div>\n    )\n  }\n  else if (llist.length === 1) {\n    const getIndex = () => {\n      let j = 0;\n      for (var i = 0; i < props.countries.length; i++) {\n        if (props.countries[i]['name'].toLowerCase() === llist[0].toLowerCase()) {\n          j = i;\n        }\n      }\n      return j;\n    }\n    const getLanguages = (items) => {\n      for (var i = 0; i < props.countries[getIndex()]['languages'].length; i++) {\n        const name = props.countries[getIndex()]['languages'][i]['name'];\n        items.push(name);\n\n      }\n    }\n    const index = getIndex();\n    const items = [];\n    getLanguages(items);\n    \n    return (\n      <div className=\"country\">\n        <h2 style={{paddingTop: \"0.5rem\"}}>{llist[0]}</h2>\n    <div><b>Capital: </b>{props.countries[index]['capital']}</div>\n    <div><b>Population: </b>{props.countries[index]['population'].toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}</div>\n        <ul style={{marginLeft: \"-25px\"}}><b>Languages: </b>\n      {items.map((item, index) => {\n          return <li key={index}>{item}</li>\n        })}\n        </ul>\n        <img className=\"image\" src={props.countries[index]['flag']} />\n        <Weather index={index} countries={props.countries} />\n      </div>\n\n    )\n\n\n  }\n  else {\n    const getFlag = (n) => {\n      let j = 0;\n      for (var i = 0; i < props.countries.length; i++) {\n        if (props.countries[i]['name'].toLowerCase() === n.toLowerCase()) {\n          j = i;\n        }\n      }\n      return emojiFlags.countryCode(props.countries[j][\"alpha2Code\"]).emoji;\n    }\n    return (\n      <div>\n        <div>{llist.map((n) => (<div key={n}>{n + \" \" + getFlag(n)}</div>))}</div>\n      </div>\n    )\n  }\n\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}